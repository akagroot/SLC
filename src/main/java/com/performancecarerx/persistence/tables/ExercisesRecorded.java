/**
 * This class is generated by jOOQ
 */
package com.performancecarerx.persistence.tables;


import com.performancecarerx.persistence.Keys;
import com.performancecarerx.persistence.PerformancecarerxDb;
import com.performancecarerx.persistence.tables.records.ExercisesRecordedRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExercisesRecorded extends TableImpl<ExercisesRecordedRecord> {

    private static final long serialVersionUID = 1506459188;

    /**
     * The reference instance of <code>performancecarerx_db.exercises_recorded</code>
     */
    public static final ExercisesRecorded EXERCISES_RECORDED = new ExercisesRecorded();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExercisesRecordedRecord> getRecordType() {
        return ExercisesRecordedRecord.class;
    }

    /**
     * The column <code>performancecarerx_db.exercises_recorded.id</code>.
     */
    public final TableField<ExercisesRecordedRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performancecarerx_db.exercises_recorded.exercise_id</code>.
     */
    public final TableField<ExercisesRecordedRecord, Integer> EXERCISE_ID = createField("exercise_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performancecarerx_db.exercises_recorded.recorded_dttm</code>.
     */
    public final TableField<ExercisesRecordedRecord, Timestamp> RECORDED_DTTM = createField("recorded_dttm", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>performancecarerx_db.exercises_recorded.weight</code>.
     */
    public final TableField<ExercisesRecordedRecord, Integer> WEIGHT = createField("weight", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performancecarerx_db.exercises_recorded.reps</code>.
     */
    public final TableField<ExercisesRecordedRecord, Integer> REPS = createField("reps", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performancecarerx_db.exercises_recorded.user_id</code>.
     */
    public final TableField<ExercisesRecordedRecord, Integer> USER_ID = createField("user_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>performancecarerx_db.exercises_recorded.created_dttm</code>.
     */
    public final TableField<ExercisesRecordedRecord, Timestamp> CREATED_DTTM = createField("created_dttm", org.jooq.impl.SQLDataType.TIMESTAMP.defaultValue(org.jooq.impl.DSL.inline("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>performancecarerx_db.exercises_recorded.note</code>.
     */
    public final TableField<ExercisesRecordedRecord, String> NOTE = createField("note", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * Create a <code>performancecarerx_db.exercises_recorded</code> table reference
     */
    public ExercisesRecorded() {
        this("exercises_recorded", null);
    }

    /**
     * Create an aliased <code>performancecarerx_db.exercises_recorded</code> table reference
     */
    public ExercisesRecorded(String alias) {
        this(alias, EXERCISES_RECORDED);
    }

    private ExercisesRecorded(String alias, Table<ExercisesRecordedRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExercisesRecorded(String alias, Table<ExercisesRecordedRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PerformancecarerxDb.PERFORMANCECARERX_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExercisesRecordedRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EXERCISES_RECORDED;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExercisesRecordedRecord> getPrimaryKey() {
        return Keys.KEY_EXERCISES_RECORDED_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExercisesRecordedRecord>> getKeys() {
        return Arrays.<UniqueKey<ExercisesRecordedRecord>>asList(Keys.KEY_EXERCISES_RECORDED_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ExercisesRecordedRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ExercisesRecordedRecord, ?>>asList(Keys.FK_EXERCISES_RECORDED_EXERCISES_ID, Keys.FK_EXERCISES_RECORD_USER_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExercisesRecorded as(String alias) {
        return new ExercisesRecorded(alias, this);
    }

    /**
     * Rename this table
     */
    public ExercisesRecorded rename(String name) {
        return new ExercisesRecorded(name, null);
    }
}
